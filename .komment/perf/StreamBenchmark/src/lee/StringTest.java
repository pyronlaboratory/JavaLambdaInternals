{"name":"StringTest.java","path":"perf/StreamBenchmark/src/lee/StringTest.java","content":{"structured":{"description":"a `StringTest` class that contains a single `main` method for running the program. The main method creates an instance of the `StringTest` class and calls its `doTest()` method. The `doTest()` method performs various tests related to string manipulation, including generating random strings of different lengths, comparing them using various methods, and measuring the execution time of these methods. Specifically, the code:\n\n* Generates random strings of varying lengths using the `randomStringList()` method.\n* Uses the `minStringForLoop()`, `minStringStream()`, and `minStringParallelStream()` methods to find the minimum string in a list of strings.\n* Measures the execution time of these methods using the `TimeUtil.outTimeUs()` method.\n\nOverall, the code demonstrates various techniques for comparing and manipulating strings in Java, while also measuring their performance.","items":[{"id":"626744db-aa91-558e-0a44-756a11369b99","ancestors":[],"type":"function","description":"is a Java file that tests various methods for comparing and finding the minimum string in an array of strings. The class has a `doTest()` method that runs multiple iterations of each test, with different lengths of input lists. The methods tested include:\n\n* `minStringForLoop`: a loop-based method that iterates over the list and compares each element to the previous one, selecting the smallest one.\n* `minStringStream`: a stream-based method that uses the `min()` function to find the minimum string in the list.\n* `minStringParallelStream`: a parallel stream-based method that uses the `min()` function to find the minimum string in the list in parallel.\n\nThe class also has a `warmUp()` method that runs multiple iterations of each test to ensure consistent results.","name":"StringTest","code":"public class StringTest {\n\n\tpublic static void main(String[] args) {\n\t\tnew StringTest().doTest();\n\t}\n\tpublic void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t20000000, \n\t\t\t\t40000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---List length: %d---\", length));\n\t\t\tArrayList<String> list = randomStringList(length);\n\t\t\tint times = 4;\n\t\t\tString min1 = \"1\";\n\t\t\tString min2 = \"2\";\n\t\t\tString min3 = \"3\";\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minStringForLoop(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringForLoop time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minStringStream(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringStream time:\", times);\n\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minStringParallelStream(list);\t\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringParallelStream time:\", times);\n\t\t\t\n\t\t\tSystem.out.println(min1.equals(min2) && min2.equals(min3));\n//\t\t\tSystem.out.println(min1);\n\t\t}\n\t}\n\tprivate void warmUp(){\n\t\tArrayList<String> list = randomStringList(10);\n\t\tfor(int i=0; i<20000; i++){\n\t\t\tminStringForLoop(list);\n\t\t\tminStringStream(list);\n\t\t\tminStringParallelStream(list);\n\t\t\t\n\t\t}\n\t}\n\tprivate String minStringForLoop(ArrayList<String> list){\n\t\tString minStr = null;\n\t\tboolean first = true;\n\t\tfor(String str : list){\n\t\t\tif(first){\n\t\t\t\tfirst = false;\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t\tif(minStr.compareTo(str)>0){\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t}\n\t\treturn minStr;\n\t}\n\tprivate String minStringStream(ArrayList<String> list){\n\t\treturn list.stream().min(String::compareTo).get();\n\t}\n\tprivate String minStringParallelStream(ArrayList<String> list){\n\t\treturn list.stream().parallel().min(String::compareTo).get();\n\t}\n\tprivate ArrayList<String> randomStringList(int listLength){\n\t\tArrayList<String> list = new ArrayList<>(listLength);\n\t\tRandom rand = new Random();\n\t\tint strLength = 10;\n\t\tStringBuilder buf = new StringBuilder(strLength);\n\t\tfor(int i=0; i<listLength; i++){\n\t\t\tbuf.delete(0, buf.length());\n\t\t\tfor(int j=0; j<strLength; j++){\n\t\t\t\tbuf.append((char)('a'+rand.nextInt(26)));\n\t\t\t}\n\t\t\tlist.add(buf.toString());\n\t\t}\n\t\treturn list;\n\t}\n}","location":{"start":12,"insert":6,"offset":" ","indent":0,"comment":{"start":5,"end":11}},"item_type":"class","length":90,"docLength":6},{"id":"f4cca224-3d69-2caf-a84d-88700f4a6162","ancestors":["626744db-aa91-558e-0a44-756a11369b99"],"type":"function","description":"executes a test method named `doTest()` on an object of the `StringTest` class, which is not shown in the code snippet provided.","params":[{"name":"args","type_name":"String[]","description":"1 or more command-line arguments passed to the `main` method when the program is launched.\n\n* Length: The `args` array has 0 or more elements.\n* Element types: Each element in `args` is of type `String`.\n* Serialized form: `args` represents a serialized input, indicating the beginning of the program execution.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n\t\tnew StringTest().doTest();\n\t}","location":{"start":14,"insert":14,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"dfc79fb8-14fa-ab85-e442-96a5535f3ac0","ancestors":["626744db-aa91-558e-0a44-756a11369b99"],"type":"function","description":"performs a series of tests to compare the time complexity of three different methods for finding the minimum value in a list: `minStringForLoop`, `minStringStream`, and `minStringParallelStream`.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n    new StringTest().doTest();\n}\n","description":"\nThis will call the doTest method and execute it."},"name":"doTest","code":"public void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t20000000, \n\t\t\t\t40000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---List length: %d---\", length));\n\t\t\tArrayList<String> list = randomStringList(length);\n\t\t\tint times = 4;\n\t\t\tString min1 = \"1\";\n\t\t\tString min2 = \"2\";\n\t\t\tString min3 = \"3\";\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minStringForLoop(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringForLoop time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minStringStream(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringStream time:\", times);\n\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minStringParallelStream(list);\t\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringParallelStream time:\", times);\n\t\t\t\n\t\t\tSystem.out.println(min1.equals(min2) && min2.equals(min3));\n//\t\t\tSystem.out.println(min1);\n\t\t}\n\t}","location":{"start":17,"insert":17,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":41,"docLength":null},{"id":"c11036e4-ced1-7a91-5245-b5f08e3aae1f","ancestors":["626744db-aa91-558e-0a44-756a11369b99"],"type":"function","description":"iterates over a list of strings 20,000 times, using three different methods to calculate the minimum string length: `minStringForLoop`, `minStringStream`, and `minStringParallelStream`.","params":[],"usage":{"language":"java","code":"private void warmUp(){\n\t\tArrayList<String> list = randomStringList(10);\n\t\tfor(int i=0; i<20000; i++){\n\t\t\tminStringForLoop(list);\n\t\t\tminStringStream(list);\n\t\t\tminStringParallelStream(list);\n\t\t\t\n\t\t}\n\t}\n","description":"\nThe `warmUp()` method is used to optimize the performance of the `minString` methods. It creates a list of 10 random strings and runs each method 20,000 times to warm up the caches and prevent any cold start issues."},"name":"warmUp","code":"private void warmUp(){\n\t\tArrayList<String> list = randomStringList(10);\n\t\tfor(int i=0; i<20000; i++){\n\t\t\tminStringForLoop(list);\n\t\t\tminStringStream(list);\n\t\t\tminStringParallelStream(list);\n\t\t\t\n\t\t}\n\t}","location":{"start":58,"insert":58,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":9,"docLength":null},{"id":"f9431912-fd33-f6a0-714f-2840823d15fd","ancestors":["626744db-aa91-558e-0a44-756a11369b99"],"type":"function","description":"iterates over an ArrayList of Strings and returns the smallest string in the list.","params":[{"name":"list","type_name":"ArrayList<String>","description":"list of strings to be compared and returned as the minimum string in the for loop.\n\n* `list` is an `ArrayList` of type `String`.\n* The elements in `list` are stored as strings.","complex_type":true}],"returns":{"type_name":"String","description":"the shortest string from an ArrayList of strings.","complex_type":false},"usage":{"language":"java","code":"ArrayList<String> list = new ArrayList<>();\n    list.add(\"a\");\n    list.add(\"b\");\n    list.add(\"c\");\n    String result = minStringForLoop(list);\n    // result is \"a\"\n","description":"\nThe method takes an array of strings as input, and returns the smallest string in the array by comparing each element with a for loop."},"name":"minStringForLoop","code":"private String minStringForLoop(ArrayList<String> list){\n\t\tString minStr = null;\n\t\tboolean first = true;\n\t\tfor(String str : list){\n\t\t\tif(first){\n\t\t\t\tfirst = false;\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t\tif(minStr.compareTo(str)>0){\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t}\n\t\treturn minStr;\n\t}","location":{"start":67,"insert":67,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":14,"docLength":null},{"id":"a0ebbf9b-99f3-aba0-b349-811e18192dbe","ancestors":["626744db-aa91-558e-0a44-756a11369b99"],"type":"function","description":"takes an ArrayList of Strings and returns the minimum String in the list after streaming the elements and comparing them using the `compareTo()` method.","params":[{"name":"list","type_name":"ArrayList<String>","description":"collection of strings that are to be compared and returned as the minimum value.\n\n* `list`: A list of strings that is processed in the function.","complex_type":true}],"returns":{"type_name":"String","description":"the minimum string in the input list.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"apple\");\n        list.add(\"orange\");\n        list.add(\"banana\");\n        list.add(\"pineapple\");\n        String smallestString = minStringStream(list);\n    }\n}\n","description":""},"name":"minStringStream","code":"private String minStringStream(ArrayList<String> list){\n\t\treturn list.stream().min(String::compareTo).get();\n\t}","location":{"start":81,"insert":81,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"83814a15-ab63-b4a6-6244-c30aed67d593","ancestors":["626744db-aa91-558e-0a44-756a11369b99"],"type":"function","description":"takes an ArrayList of Strings and returns the minimum string in the list after parallel stream operation using the `min()` method.","params":[{"name":"list","type_name":"ArrayList<String>","description":"ArrayList of strings that are to be processed by the parallel stream and min() method.\n\n* Type: List<String>\n\t+ Element type: String\n\t+ Number of elements: Unknown (can be any number)\n\t+ Order of elements: Unknown (can be in any order)\n\nThe function applies a parallel stream operation to the list, using the `min` method to find the smallest element among all the strings in the list. The `get()` method is used to retrieve the minimum value from the stream.","complex_type":true}],"returns":{"type_name":"String","description":"the minimum string in the `list`.","complex_type":false},"usage":{"language":"java","code":"import java.util.*;\npublic class StringTest {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"hello\");\n        list.add(\"world\");\n        System.out.println(minStringParallelStream(list)); // Output: \"hello\"\n    }\n    \n    private static String minStringParallelStream(List<String> list) {\n        return list.stream().parallel().min(String::compareTo).get();\n    }\n}\n","description":""},"name":"minStringParallelStream","code":"private String minStringParallelStream(ArrayList<String> list){\n\t\treturn list.stream().parallel().min(String::compareTo).get();\n\t}","location":{"start":84,"insert":84,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"175e10c5-0e99-ef9c-ce46-cb05a9146e2c","ancestors":["626744db-aa91-558e-0a44-756a11369b99"],"type":"function","description":"generates an ArrayList of random strings of a specified length, using a Random object to determine the characters within each string.","params":[{"name":"listLength","type_name":"int","description":"desired length of the generated string list.","complex_type":false}],"returns":{"type_name":"ArrayList","description":"a list of `strLength` random strings, each composed of uppercase letters between 'a' and 'z'.\n\n* The list returned is an ArrayList of String objects.\n* Each element in the list is a randomly generated string of length 10 characters.\n* The strings are generated using a combination of ASCII characters, specifically the letters 'a' to 'z'.\n* The order of the elements in the list is randomized.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n\tArrayList<String> list = new StringTest().randomStringList(5);\n\tfor (String str : list) {\n\t\tSystem.out.println(str);\n\t}\n}\n","description":"\nIn this example, the randomStringList method is called on an object of class StringTest to generate a list of strings with 5 elements. The generated list is then iterated over and each element is printed to standard output using a for-each loop."},"name":"randomStringList","code":"private ArrayList<String> randomStringList(int listLength){\n\t\tArrayList<String> list = new ArrayList<>(listLength);\n\t\tRandom rand = new Random();\n\t\tint strLength = 10;\n\t\tStringBuilder buf = new StringBuilder(strLength);\n\t\tfor(int i=0; i<listLength; i++){\n\t\t\tbuf.delete(0, buf.length());\n\t\t\tfor(int j=0; j<strLength; j++){\n\t\t\t\tbuf.append((char)('a'+rand.nextInt(26)));\n\t\t\t}\n\t\t\tlist.add(buf.toString());\n\t\t}\n\t\treturn list;\n\t}","location":{"start":87,"insert":87,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":14,"docLength":null}]}}}