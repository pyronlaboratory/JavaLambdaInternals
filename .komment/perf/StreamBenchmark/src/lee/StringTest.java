{"name":"StringTest.java","path":"perf/StreamBenchmark/src/lee/StringTest.java","content":{"structured":{"description":"a `StringTest` class that performs various tests on string manipulation. The main method calls the `doTest()` method, which first warms up the random string list generator and then runs several tests:\n\n* Testing the `minStringForLoop()`, `minStringStream()`, and `minStringParallelStream()` methods, which compare the shortest string in a list to the previous shortest string.\n* Generating random strings of varying lengths using the `randomStringList()` method.\n\nThe code uses several high-level packages, including `java`, `java.util`, `java.util.Random`, and `java.util.stream`.","items":[{"id":"ac541774-a57b-b181-b049-6cd28ccec622","ancestors":[],"type":"function","description":"is a Java file that tests various methods for finding the minimum string in an array of strings. It includes several different approaches to find the minimum string, including using loops, streams, and parallel streams. The class also includes a warm-up method to ensure consistent results.","name":"StringTest","code":"public class StringTest {\n\n\tpublic static void main(String[] args) {\n\t\tnew StringTest().doTest();\n\t}\n\tpublic void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t20000000, \n\t\t\t\t40000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---List length: %d---\", length));\n\t\t\tArrayList<String> list = randomStringList(length);\n\t\t\tint times = 4;\n\t\t\tString min1 = \"1\";\n\t\t\tString min2 = \"2\";\n\t\t\tString min3 = \"3\";\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minStringForLoop(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringForLoop time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minStringStream(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringStream time:\", times);\n\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minStringParallelStream(list);\t\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringParallelStream time:\", times);\n\t\t\t\n\t\t\tSystem.out.println(min1.equals(min2) && min2.equals(min3));\n//\t\t\tSystem.out.println(min1);\n\t\t}\n\t}\n\tprivate void warmUp(){\n\t\tArrayList<String> list = randomStringList(10);\n\t\tfor(int i=0; i<20000; i++){\n\t\t\tminStringForLoop(list);\n\t\t\tminStringStream(list);\n\t\t\tminStringParallelStream(list);\n\t\t\t\n\t\t}\n\t}\n\tprivate String minStringForLoop(ArrayList<String> list){\n\t\tString minStr = null;\n\t\tboolean first = true;\n\t\tfor(String str : list){\n\t\t\tif(first){\n\t\t\t\tfirst = false;\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t\tif(minStr.compareTo(str)>0){\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t}\n\t\treturn minStr;\n\t}\n\tprivate String minStringStream(ArrayList<String> list){\n\t\treturn list.stream().min(String::compareTo).get();\n\t}\n\tprivate String minStringParallelStream(ArrayList<String> list){\n\t\treturn list.stream().parallel().min(String::compareTo).get();\n\t}\n\tprivate ArrayList<String> randomStringList(int listLength){\n\t\tArrayList<String> list = new ArrayList<>(listLength);\n\t\tRandom rand = new Random();\n\t\tint strLength = 10;\n\t\tStringBuilder buf = new StringBuilder(strLength);\n\t\tfor(int i=0; i<listLength; i++){\n\t\t\tbuf.delete(0, buf.length());\n\t\t\tfor(int j=0; j<strLength; j++){\n\t\t\t\tbuf.append((char)('a'+rand.nextInt(26)));\n\t\t\t}\n\t\t\tlist.add(buf.toString());\n\t\t}\n\t\treturn list;\n\t}\n}","location":{"start":12,"insert":6,"offset":" ","indent":0,"comment":{"start":5,"end":11}},"item_type":"class","length":90,"docLength":6},{"id":"68e1aac9-0aad-aba2-7c4d-01694c7a66af","ancestors":["ac541774-a57b-b181-b049-6cd28ccec622"],"type":"function","description":"calls the `doTest()` method, which is not provided in the code snippet. Therefore, the functionality of the `main` function cannot be determined.","params":[{"name":"args","type_name":"String[]","description":"0 or more command-line arguments passed to the `main` method when the program is launched.\n\n* Length: The `main` function receives an array of strings called `args`, which has a length of 1.\n* Elements: The `args` array contains only one element, which is a string.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n\t\tnew StringTest().doTest();\n\t}","location":{"start":14,"insert":14,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"40bc0be5-9c11-e39e-a649-c7b7ed13c1dc","ancestors":["ac541774-a57b-b181-b049-6cd28ccec622"],"type":"function","description":"performs benchmarking tests on various methods for finding the minimum string in a list, including a loop-based approach, a stream-based approach, and a parallel stream-based approach.","params":[],"usage":{"language":"java","code":"StringTest stringTest = new StringTest();\nstringTest.doTest();\n","description":""},"name":"doTest","code":"public void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t20000000, \n\t\t\t\t40000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---List length: %d---\", length));\n\t\t\tArrayList<String> list = randomStringList(length);\n\t\t\tint times = 4;\n\t\t\tString min1 = \"1\";\n\t\t\tString min2 = \"2\";\n\t\t\tString min3 = \"3\";\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minStringForLoop(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringForLoop time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minStringStream(list);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringStream time:\", times);\n\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minStringParallelStream(list);\t\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minStringParallelStream time:\", times);\n\t\t\t\n\t\t\tSystem.out.println(min1.equals(min2) && min2.equals(min3));\n//\t\t\tSystem.out.println(min1);\n\t\t}\n\t}","location":{"start":17,"insert":17,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":41,"docLength":null},{"id":"42017347-fafa-ddb9-3746-336f31efafac","ancestors":["ac541774-a57b-b181-b049-6cd28ccec622"],"type":"function","description":"iteratively calls three methods on an ArrayList of strings: `minStringForLoop`, `minStringStream`, and `minStringParallelStream`. Each method performs a different optimization on the list.","params":[],"usage":{"language":"java","code":"import java.util.ArrayList;\nimport java.util.Random;\n\npublic class StringTest {\n    public static void main(String[] args) {\n        new StringTest().doTest();\n    }\n    \n    public void doTest() {\n        ArrayList<String> list = randomStringList(10);\n        for (int i=0; i<20000; i++) {\n            minStringForLoop(list);\n            minStringStream(list);\n            minStringParallelStream(list);\n        }\n    }\n    \n    private void warmUp() {\n        ArrayList<String> list = randomStringList(10);\n        for (int i=0; i<20000; i++) {\n            minStringForLoop(list);\n            minStringStream(list);\n            minStringParallelStream(list);\n        }\n    }\n    \n    private String minStringForLoop(ArrayList<String> list) {\n        String minStr = null;\n        boolean first = true;\n        for (String str : list) {\n            if (first) {\n                first = false;\n                minStr = str;\n            }\n            if (minStr.compareTo(str) > 0) {\n                minStr = str;\n            }\n        }\n        return minStr;\n    }\n    \n    private String minStringStream(ArrayList<String> list) {\n        return list.stream().min(String::compareTo).get();\n    }\n    \n    private String minStringParallelStream(ArrayList<String> list) {\n        return list.stream().parallel().min(String::compareTo).get();\n    }\n    \n    private ArrayList<String> randomStringList(int listLength) {\n        ArrayList<String> list = new ArrayList<>(listLength);\n        Random rand = new Random();\n        int strLength = 10;\n        StringBuilder buf = new StringBuilder(strLength);\n        for (int i=0; i<listLength; i++) {\n            buf.delete(0, buf.length());\n            for (int j=0; j<strLength; j++) {\n                buf.append((char)('a'+rand.nextInt(26)));\n            }\n            list.add(buf.toString());\n        }\n        return list;\n    }\n}\n","description":""},"name":"warmUp","code":"private void warmUp(){\n\t\tArrayList<String> list = randomStringList(10);\n\t\tfor(int i=0; i<20000; i++){\n\t\t\tminStringForLoop(list);\n\t\t\tminStringStream(list);\n\t\t\tminStringParallelStream(list);\n\t\t\t\n\t\t}\n\t}","location":{"start":58,"insert":58,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":9,"docLength":null},{"id":"bef202b2-9187-079f-f54f-73a07f95c1c7","ancestors":["ac541774-a57b-b181-b049-6cd28ccec622"],"type":"function","description":"iterates through an ArrayList of Strings and returns the minimum string in the list.","params":[{"name":"list","type_name":"ArrayList<String>","description":"list of strings to be compared and returned as the minimum string value in the function execution.\n\n* It is an ArrayList of Strings, meaning it is a collection of String objects.\n* Each element in the list is a String object.\n* The size of the list can vary depending on the input provided.","complex_type":true}],"returns":{"type_name":"String","description":"the smallest string from the input list.","complex_type":false},"usage":{"language":"java","code":"import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        \n        // Add elements to the list\n        list.add(\"banana\");\n        list.add(\"orange\");\n        list.add(\"apple\");\n        \n        String smallest = minStringForLoop(list);\n        System.out.println(\"Smallest string in the list is: \" + smallest);\n    }\n}\n","description":""},"name":"minStringForLoop","code":"private String minStringForLoop(ArrayList<String> list){\n\t\tString minStr = null;\n\t\tboolean first = true;\n\t\tfor(String str : list){\n\t\t\tif(first){\n\t\t\t\tfirst = false;\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t\tif(minStr.compareTo(str)>0){\n\t\t\t\tminStr = str;\n\t\t\t}\n\t\t}\n\t\treturn minStr;\n\t}","location":{"start":67,"insert":67,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":14,"docLength":null},{"id":"4fdf2e6d-377f-9a93-044f-54a77dcc90d9","ancestors":["ac541774-a57b-b181-b049-6cd28ccec622"],"type":"function","description":"takes an ArrayList of Strings and returns the minimum String in the list after streaming the elements and comparing them using the `compareTo()` method.","params":[{"name":"list","type_name":"ArrayList<String>","description":"ArrayList of strings to be compared and reduced to the smallest string using the Stream API.\n\nThe `list` input is an instance of `ArrayList`. This means that it is a collection class in Java that can store a list of objects or primitives and provides methods for common operations such as adding, removing, and accessing elements.","complex_type":true}],"returns":{"type_name":"String","description":"the minimum string in the input list.","complex_type":false},"usage":{"language":"java","code":"ArrayList<String> list = new ArrayList<>();\nlist.add(\"hello\");\nlist.add(\"there\");\nSystem.out.println(minStringStream(list));  // prints \"hello\"\n","description":""},"name":"minStringStream","code":"private String minStringStream(ArrayList<String> list){\n\t\treturn list.stream().min(String::compareTo).get();\n\t}","location":{"start":81,"insert":81,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"dfbcba5a-d9e0-8b8d-244d-6460c230d1d1","ancestors":["ac541774-a57b-b181-b049-6cd28ccec622"],"type":"function","description":"takes an ArrayList of Strings and returns the minimum String in the list after parallel streaming and using the `min()` method.","params":[{"name":"list","type_name":"ArrayList<String>","description":"list of strings to be processed using parallel stream and the minimum string is returned.\n\n* `list` is an ArrayList of Strings.\n* The stream method is called on the list parallel to each other, indicating that multiple threads are executed simultaneously.\n* The `min` method is used to find the smallest element in the stream, which is a String in this case.\n* The `compareTo` method compares the two elements being compared based on their string representation.","complex_type":true}],"returns":{"type_name":"String","description":"the minimum string value in the input list.","complex_type":false},"usage":{"language":"java","code":"import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        // Add strings to the list\n        String result = minStringParallelStream(list);\n        System.out.println(result);\n    }\n}\n","description":""},"name":"minStringParallelStream","code":"private String minStringParallelStream(ArrayList<String> list){\n\t\treturn list.stream().parallel().min(String::compareTo).get();\n\t}","location":{"start":84,"insert":84,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"d18d6ea2-1a28-259f-e04b-cf3ef4ff3be6","ancestors":["ac541774-a57b-b181-b049-6cd28ccec622"],"type":"function","description":"generates an array of random strings of a specified length using a randomized approach to prevent repetition.","params":[{"name":"listLength","type_name":"int","description":"maximum length of the randomly generated string list, which determines the capacity of the `ArrayList` and the number of strings generated.","complex_type":false}],"returns":{"type_name":"ArrayList","description":"a list of randomized strings of length 10 each.\n\n* The function returns an ArrayList of strings, where each string has a length of 10 characters.\n* The ArrayList is created using the `new` keyword and the `ArrayList` class.\n* A Random object is created using the `new` keyword and the `Random` class. This object is used to generate random integers for each string in the list.\n* For each iteration of the loop, a new StringBuffer is created using the `new` keyword and the `StringBuilder` class. The length of the StringBuffer is set to 10 characters using the `delete` method.\n* In the inner loop, a random character is generated using the `nextInt` method of the Random object, and this character is appended to the StringBuffer using the `append` method.\n* Once all the strings are generated, they are added to the ArrayList using the `add` method.\n* The function returns the ArrayList of strings.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    ArrayList<String> list = new ArrayList<>();\n    int listLength = 10; // the number of elements to be added to the list.\n    list = randomStringList(listLength); // adding 10 random strings to the list\n    System.out.println(list); // printing the contents of the list\n  }\n}\n","description":""},"name":"randomStringList","code":"private ArrayList<String> randomStringList(int listLength){\n\t\tArrayList<String> list = new ArrayList<>(listLength);\n\t\tRandom rand = new Random();\n\t\tint strLength = 10;\n\t\tStringBuilder buf = new StringBuilder(strLength);\n\t\tfor(int i=0; i<listLength; i++){\n\t\t\tbuf.delete(0, buf.length());\n\t\t\tfor(int j=0; j<strLength; j++){\n\t\t\t\tbuf.append((char)('a'+rand.nextInt(26)));\n\t\t\t}\n\t\t\tlist.add(buf.toString());\n\t\t}\n\t\treturn list;\n\t}","location":{"start":87,"insert":87,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":14,"docLength":null}]}}}