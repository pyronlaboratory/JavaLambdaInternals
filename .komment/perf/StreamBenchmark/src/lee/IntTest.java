{"name":"IntTest.java","path":"perf/StreamBenchmark/src/lee/IntTest.java","content":{"structured":{"description":"A `IntTest` class with a single `main` method that runs a series of tests using an array of integers. The tests include comparing the result of three different methods for finding the smallest integer in an array: `minIntFor`, `minIntStream`, and `minIntParallelStream`. The code also includes a `warmUp` method that runs the tests multiple times to generate output. The package `lee` is used, which appears to be a custom package defined by the author of the code.","items":[{"id":"30c44deb-2cc0-aa84-0041-e28590869fbd","ancestors":[],"type":"function","description":"has a `main` method that calls the `doTest` method, which in turn calls the `warmUp` method before looping through various lengths of integer arrays and comparing the results of three different methods for finding the minimum value: `minIntFor`, `minIntStream`, and `minIntParallelStream`. The `minIntFor` method compares the minimum value found using each of these methods, and prints a message indicating whether the values are equal or not.","name":"IntTest","code":"public class IntTest {\n\n\tpublic static void main(String[] args) {\n\t\tnew IntTest().doTest();\n\t}\n\tpublic void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t100000000, \n\t\t\t\t1000000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---array length: %d---\", length));\n\t\t\tint[] arr = new int[length];\n\t\t\trandomInt(arr);\n\t\t\t\n\t\t\tint times = 4;\n\t\t\tint min1 = 1;\n\t\t\tint min2 = 2;\n\t\t\tint min3 = 3;\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minIntFor(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntFor time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minIntStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntStream time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minIntParallelStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntParallelStream time:\", times);\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(min1==min2 && min2==min3);\n\t\t}\n\t}\n\tprivate void warmUp(){\n\t\tint[] arr = new int[100];\n\t\trandomInt(arr);\n\t\tfor(int i=0; i<20000; i++){\n//\t\t\tminIntFor(arr);\n\t\t\tminIntStream(arr);\n\t\t\tminIntParallelStream(arr);\n\t\t\t\n\t\t}\n\t}\n\tprivate int minIntFor(int[] arr){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tif(arr[i]<min)\n\t\t\t\tmin = arr[i];\n\t\t}\n\t\treturn min;\n\t}\n\tprivate int minIntStream(int[] arr){\n\t\treturn Arrays.stream(arr).min().getAsInt();\n\t}\n\tprivate int minIntParallelStream(int[] arr){\n\t\treturn Arrays.stream(arr).parallel().min().getAsInt();\n\t}\n\tprivate void randomInt(int[] arr){\n\t\tRandom r = new Random();\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tarr[i] = r.nextInt();\n\t\t}\n\t}\n}","location":{"start":11,"insert":5,"offset":" ","indent":0,"comment":{"start":4,"end":10}},"item_type":"class","length":79,"docLength":6},{"id":"e9187a57-b04c-288e-eb4e-d2036a0e79f8","ancestors":["30c44deb-2cc0-aa84-0041-e28590869fbd"],"type":"function","description":"runs the `IntTest` class's `doTest()` method, which performs some testing related to integers.","params":[{"name":"args","type_name":"String[]","description":"0 or more command-line arguments passed to the program when it is executed, and is used by the `main` method to perform various actions based on their presence or absence.\n\n* Length: The length of the `args` array is 0.\n* Elements: The elements of the `args` array are of type `String`.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n\t\tnew IntTest().doTest();\n\t}","location":{"start":13,"insert":13,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"bb645ea9-8f1e-05b0-0d40-d8e457b956d5","ancestors":["30c44deb-2cc0-aa84-0041-e28590869fbd"],"type":"function","description":"performs several tests to compare the performance of different methods for finding the minimum integer in an array: `minIntFor`, `minIntStream`, and `minIntParallelStream`.","params":[],"usage":{"language":"java","code":"public static void main(String[] args) {\n\tIntTest test = new IntTest();\n\ttest.doTest();\n}\n","description":""},"name":"doTest","code":"public void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t100000000, \n\t\t\t\t1000000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---array length: %d---\", length));\n\t\t\tint[] arr = new int[length];\n\t\t\trandomInt(arr);\n\t\t\t\n\t\t\tint times = 4;\n\t\t\tint min1 = 1;\n\t\t\tint min2 = 2;\n\t\t\tint min3 = 3;\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minIntFor(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntFor time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minIntStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntStream time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minIntParallelStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntParallelStream time:\", times);\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(min1==min2 && min2==min3);\n\t\t}\n\t}","location":{"start":16,"insert":16,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":43,"docLength":null},{"id":"11b7973d-645f-e4aa-ea44-8b83ef74bf8a","ancestors":["30c44deb-2cc0-aa84-0041-e28590869fbd"],"type":"function","description":"generates a random integer array, runs various methods on it, and repeats the process multiple times.","params":[],"usage":{"language":"java","code":"int[] arr = new int[100];\nrandomInt(arr);\nwarmUp();\nminIntFor(arr);\n","description":"\nIt creates an array of integers with 100 elements and then uses the randomInt() method to initialize its elements. It then calls warmUp(), which repeatedly runs the minIntFor, minIntStream, and minIntParallelStream methods for each element in arr, 20,000 times. After this, it calls minIntFor(arr) once again to obtain the minimum value in the array arr. The output of these statements should be an array with the minimum value of all elements."},"name":"warmUp","code":"private void warmUp(){\n\t\tint[] arr = new int[100];\n\t\trandomInt(arr);\n\t\tfor(int i=0; i<20000; i++){\n//\t\t\tminIntFor(arr);\n\t\t\tminIntStream(arr);\n\t\t\tminIntParallelStream(arr);\n\t\t\t\n\t\t}\n\t}","location":{"start":59,"insert":59,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":10,"docLength":null},{"id":"727e5037-2aa2-638d-4344-5be78b3873c7","ancestors":["30c44deb-2cc0-aa84-0041-e28590869fbd"],"type":"function","description":"iterates through an array of integers, finds the smallest value among them, and returns it.","params":[{"name":"arr","type_name":"int[]","description":"1D array of integers that is being searched for the smallest value.\n\nThe `int[]` array `arr` represents a collection of integers that can range from negative infinity to positive infinity.\nThe length of the array `arr` is determined by the value of its component `i`.","complex_type":true}],"returns":{"type_name":"int","description":"the smallest integer value among the elements in the input array.","complex_type":false},"usage":{"language":"java","code":"int[] arr = {5, 7, -1, 3};\nSystem.out.println(minIntFor(arr)); // prints \"-1\"\n","description":"\nIn this code, the array `arr` has four integer values: `{5, 7, -1, 3}`. The method minIntFor is called on the array `arr`, and it returns the smallest value in the array, which is `-1`."},"name":"minIntFor","code":"private int minIntFor(int[] arr){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tif(arr[i]<min)\n\t\t\t\tmin = arr[i];\n\t\t}\n\t\treturn min;\n\t}","location":{"start":69,"insert":69,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":8,"docLength":null},{"id":"a72011bc-d4c1-d7b4-cc43-0043fc5bbbfb","ancestors":["30c44deb-2cc0-aa84-0041-e28590869fbd"],"type":"function","description":"takes an integer array as input and returns the minimum value in the array using Java Stream API.","params":[{"name":"arr","type_name":"int[]","description":"1D array of integers that is to be processed by the `minIntStream()` method.\n\n* `arr` is an int array with multiple values.","complex_type":true}],"returns":{"type_name":"int","description":"the minimum integer value in the input array.","complex_type":false},"usage":{"language":"java","code":"private int minIntStream(int[] arr){\n\t\treturn Arrays.stream(arr).min().getAsInt();\n}\n\npublic static void main(String[] args) {\n    int[] test = new int[]{1,2,3,4,5};\n    System.out.println(minIntStream(test)); // Output: 1\n}\n","description":""},"name":"minIntStream","code":"private int minIntStream(int[] arr){\n\t\treturn Arrays.stream(arr).min().getAsInt();\n\t}","location":{"start":77,"insert":77,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"ca92582b-db29-1888-d547-0c7798e11b16","ancestors":["30c44deb-2cc0-aa84-0041-e28590869fbd"],"type":"function","description":"parallelly processes an integer array using the `Arrays.stream()` method and returns the minimum value in the array as an integer.","params":[{"name":"arr","type_name":"int[]","description":"1D array of integers that is being processed by the `minIntParallelStream()` method.\n\n* It is an array of integers.\n* The array has several elements (the exact number may vary depending on the input).\n* Each element in the array is an integer value.","complex_type":true}],"returns":{"type_name":"int","description":"the minimum value of the input array, calculated using the `min()` method and returning the result as an integer.","complex_type":false},"usage":{"language":"java","code":"public class Example {\n    public static void main(String[] args) {\n        int[] arr = new int[] {1, 2, 3, 4, 5};\n        System.out.println(minIntParallelStream(arr)); // Output: 1\n    }\n}\n","description":""},"name":"minIntParallelStream","code":"private int minIntParallelStream(int[] arr){\n\t\treturn Arrays.stream(arr).parallel().min().getAsInt();\n\t}","location":{"start":80,"insert":80,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"78c299e1-ccf6-01b1-bf4d-e390900e6ac3","ancestors":["30c44deb-2cc0-aa84-0041-e28590869fbd"],"type":"function","description":"generates a random integer array within a specified range by iterating through the array and assigning each index a randomly generated value using the `Random` class.","params":[{"name":"arr","type_name":"int[]","description":"integer array whose elements are being randomly generated by the function.\n\n* The function takes an integer array `arr` as input.\n* `arr` is an instance of the `int` class.\n* The length of `arr` can be determined using the `length` property.","complex_type":true}],"usage":{"language":"java","code":"public static void main(String[] args) {\n        int[] arr = new int[10];\n        randomInt(arr);\n}\n","description":""},"name":"randomInt","code":"private void randomInt(int[] arr){\n\t\tRandom r = new Random();\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tarr[i] = r.nextInt();\n\t\t}\n\t}","location":{"start":83,"insert":83,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":6,"docLength":null}]}}}