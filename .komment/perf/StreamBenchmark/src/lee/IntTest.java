{"name":"IntTest.java","path":"perf/StreamBenchmark/src/lee/IntTest.java","content":{"structured":{"description":"A `IntTest` class with a single `main` method that creates an instance of the class and calls its `doTest()` method. The `doTest()` method initializes arrays of different sizes and loops through each array element to perform various operations, including using `minIntFor`, `minIntStream`, and `minIntParallelStream` methods to calculate the minimum value in the array. These methods use different approaches to find the minimum value, such as sequential, parallel streaming, or parallel processing with a single thread. The code also includes a `warmUp()` method that performs similar operations to prepare the arrays for testing.","items":[{"id":"863dcc91-dbaa-1a97-1044-30df88e183f7","ancestors":[],"type":"function","description":"has a `main` method that calls the `doTest` method, which performs various tests on an array of integers. The `doTest` method first calls the `warmUp` method, which runs random integer operations on an array of size 100. Then, it loops through multiple iterations of three different methods to compare the results: `minIntFor`, `minIntStream`, and `minIntParallelStream`. Each of these methods performs a minimal integer calculation on a given array length and compares the results.","name":"IntTest","code":"public class IntTest {\n\n\tpublic static void main(String[] args) {\n\t\tnew IntTest().doTest();\n\t}\n\tpublic void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t100000000, \n\t\t\t\t1000000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---array length: %d---\", length));\n\t\t\tint[] arr = new int[length];\n\t\t\trandomInt(arr);\n\t\t\t\n\t\t\tint times = 4;\n\t\t\tint min1 = 1;\n\t\t\tint min2 = 2;\n\t\t\tint min3 = 3;\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minIntFor(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntFor time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minIntStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntStream time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minIntParallelStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntParallelStream time:\", times);\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(min1==min2 && min2==min3);\n\t\t}\n\t}\n\tprivate void warmUp(){\n\t\tint[] arr = new int[100];\n\t\trandomInt(arr);\n\t\tfor(int i=0; i<20000; i++){\n//\t\t\tminIntFor(arr);\n\t\t\tminIntStream(arr);\n\t\t\tminIntParallelStream(arr);\n\t\t\t\n\t\t}\n\t}\n\tprivate int minIntFor(int[] arr){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tif(arr[i]<min)\n\t\t\t\tmin = arr[i];\n\t\t}\n\t\treturn min;\n\t}\n\tprivate int minIntStream(int[] arr){\n\t\treturn Arrays.stream(arr).min().getAsInt();\n\t}\n\tprivate int minIntParallelStream(int[] arr){\n\t\treturn Arrays.stream(arr).parallel().min().getAsInt();\n\t}\n\tprivate void randomInt(int[] arr){\n\t\tRandom r = new Random();\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tarr[i] = r.nextInt();\n\t\t}\n\t}\n}","location":{"start":11,"insert":5,"offset":" ","indent":0,"comment":{"start":4,"end":10}},"item_type":"class","length":79,"docLength":6},{"id":"d25b9249-dad2-88a4-f54d-8e425c605c45","ancestors":["863dcc91-dbaa-1a97-1044-30df88e183f7"],"type":"function","description":"executes a test for integers.","params":[{"name":"args","type_name":"String[]","description":"1 or more command line arguments passed to the program when it is launched, and are provided as an array to the `main()` method for processing.\n\n* Length: The `args` array has 0 or more elements, as declared in the function signature.\n* Element types: Each element of `args` is a String object.\n* Optional arguments: There are no optional arguments provided in the example code.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n\t\tnew IntTest().doTest();\n\t}","location":{"start":13,"insert":13,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"43a6b78e-b83e-0cad-c546-c0fb7a1f546d","ancestors":["863dcc91-dbaa-1a97-1044-30df88e183f7"],"type":"function","description":"performs a series of tests on an array of integers, including measuring the time complexity of various methods for finding the minimum integer in the array using nanotime and TimeUtil classes.","params":[],"usage":{"language":"java","code":"IntTest intTest = new IntTest();\nintTest.doTest();\n","description":""},"name":"doTest","code":"public void doTest(){\n\t\twarmUp();\n\t\tint[] lengths = {\n\t\t\t\t10000, \n\t\t\t\t100000, \n\t\t\t\t1000000, \n\t\t\t\t10000000, \n\t\t\t\t100000000, \n\t\t\t\t1000000000\n\t\t\t};\n\t\tfor(int length : lengths){\n\t\t\tSystem.out.println(String.format(\"---array length: %d---\", length));\n\t\t\tint[] arr = new int[length];\n\t\t\trandomInt(arr);\n\t\t\t\n\t\t\tint times = 4;\n\t\t\tint min1 = 1;\n\t\t\tint min2 = 2;\n\t\t\tint min3 = 3;\n\t\t\tlong startTime;\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin1 = minIntFor(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntFor time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin2 = minIntStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntStream time:\", times);\n\t\t\t\n\t\t\tstartTime = System.nanoTime();\n\t\t\tfor(int i=0; i<times; i++){\n\t\t\t\tmin3 = minIntParallelStream(arr);\n\t\t\t}\n\t\t\tTimeUtil.outTimeUs(startTime, \"minIntParallelStream time:\", times);\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(min1==min2 && min2==min3);\n\t\t}\n\t}","location":{"start":16,"insert":16,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":43,"docLength":null},{"id":"e37e24df-0fdd-918f-9148-269b8cdcff36","ancestors":["863dcc91-dbaa-1a97-1044-30df88e183f7"],"type":"function","description":"performs random integer generation, min-int computations using various methods (for loop, Stream, and Parallel Stream), and iterates over 20000 times to prepare the system for future tasks.","params":[],"usage":{"language":"java","code":"IntTest intTest = new IntTest();\nint[] arr = new int[100];\nrandomInt(arr);\nfor (int i = 0; i < 20000; i++) {\n    minIntFor(arr);\n}\n","description":""},"name":"warmUp","code":"private void warmUp(){\n\t\tint[] arr = new int[100];\n\t\trandomInt(arr);\n\t\tfor(int i=0; i<20000; i++){\n//\t\t\tminIntFor(arr);\n\t\t\tminIntStream(arr);\n\t\t\tminIntParallelStream(arr);\n\t\t\t\n\t\t}\n\t}","location":{"start":59,"insert":59,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":10,"docLength":null},{"id":"a8d116b8-6e04-518d-4c48-07feef1a084e","ancestors":["863dcc91-dbaa-1a97-1044-30df88e183f7"],"type":"function","description":"takes an integer array as input and returns the smallest value present in the array. It does so by iterating through the elements of the array, comparing each one to the current minimum value, and updating the minimum value accordingly.","params":[{"name":"arr","type_name":"int[]","description":"array whose minimum integer value is to be found.\n\n* `arr` is an array of integers, with a length of `arr.length`.\n* Each element in the array can take on any integer value within the range of `-2^31` to `2^31-1`, inclusive of zero.","complex_type":true}],"returns":{"type_name":"int","description":"the smallest integer value among the input array elements.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n    // Example input for 'arr'\n    int[] arr = new int[]{1, 2, 3, 4, 5};\n\n    // Calling the method with the example input\n    System.out.println(minIntFor(arr));\n}\n","description":"\nThe output of this program would be:\n"},"name":"minIntFor","code":"private int minIntFor(int[] arr){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tif(arr[i]<min)\n\t\t\t\tmin = arr[i];\n\t\t}\n\t\treturn min;\n\t}","location":{"start":69,"insert":69,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":8,"docLength":null},{"id":"2d0198c1-5125-f084-3e44-0631c09c4429","ancestors":["863dcc91-dbaa-1a97-1044-30df88e183f7"],"type":"function","description":"takes an integer array `arr` and returns the minimum value in the array as an int using the `Arrays.stream()` method to stream the elements of the array and the `min()` method to find the minimum value.","params":[{"name":"arr","type_name":"int[]","description":"integer array to be processed by the `minIntStream()` method.\n\n* `arr` is an array of integers.\n* It has at least one element.\n* The elements in the array are not null or empty.","complex_type":true}],"returns":{"type_name":"int","description":"the minimum integer value in the input array.","complex_type":false},"usage":{"language":"java","code":"int[] arr = new int[10];\n// populate the array with random values \nrandomInt(arr);\n// find the minimum value in the array using the stream API \nSystem.out.println(minIntStream(arr));\n","description":""},"name":"minIntStream","code":"private int minIntStream(int[] arr){\n\t\treturn Arrays.stream(arr).min().getAsInt();\n\t}","location":{"start":77,"insert":77,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"ecb14316-74b0-7eb5-c545-a9070b02331a","ancestors":["863dcc91-dbaa-1a97-1044-30df88e183f7"],"type":"function","description":"takes an integer array and returns the minimum value in the array using a parallel stream.","params":[{"name":"arr","type_name":"int[]","description":"1D array of integers that is processed by the `minIntParallelStream()` method.\n\n* `arr` is an array of integers with unspecified size and shape.\n* The elements in `arr` can take on any valid integer value.\n* `Arrays.stream(arr)` creates a parallel stream of integers from the elements of `arr`.","complex_type":true}],"returns":{"type_name":"int","description":"the minimum integer value in the input array.","complex_type":false},"usage":{"language":"java","code":"public class Example{\n    public static void main(String[] args) {\n        int[] arr = new int[10];\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = (int)(Math.random() * 10); // Generate random numbers between 0 and 10 inclusive\n        }\n        \n        int min = IntTest.minIntParallelStream(arr);\n        System.out.println(\"Minimum value in the array: \" + min); // Output: Minimum value in the array: 2\n    }\n}\n","description":""},"name":"minIntParallelStream","code":"private int minIntParallelStream(int[] arr){\n\t\treturn Arrays.stream(arr).parallel().min().getAsInt();\n\t}","location":{"start":80,"insert":80,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":3,"docLength":null},{"id":"a4e11eda-7148-f2bd-6a4c-37221a2d0751","ancestors":["863dcc91-dbaa-1a97-1044-30df88e183f7"],"type":"function","description":"generates a random integer array of specified length, using the `Random` class to generate unique integers.","params":[{"name":"arr","type_name":"int[]","description":"array that will have its elements generated by the function, each element randomly selected from a range of integers using the `Random` class.\n\n* `arr` is an instance of `int[]`. This means it is an array of integers that can store multiple values of type `int`.\n* The length of the array is determined by the value of its constructor.\n* Each element in the array is accessed through its index, which ranges from 0 to the length of the array - 1.","complex_type":true}],"usage":{"language":"java","code":"int[] arr = new int[10];\nrandomInt(arr);\n","description":""},"name":"randomInt","code":"private void randomInt(int[] arr){\n\t\tRandom r = new Random();\n\t\tfor(int i=0; i<arr.length; i++){\n\t\t\tarr[i] = r.nextInt();\n\t\t}\n\t}","location":{"start":83,"insert":83,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":6,"docLength":null}]}}}