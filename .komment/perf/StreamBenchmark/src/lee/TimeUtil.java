{"name":"TimeUtil.java","path":"perf/StreamBenchmark/src/lee/TimeUtil.java","content":{"structured":{"description":"Three static methods in a class named TimeUtil. The methods outTimeMs, outTimeUs, and outTimeUs(long startTime, String msg, int times) are used to display the time elapsed since a specified starting point in milliseconds (ms), microseconds (us), or average microseconds per call, respectively. The code utilizes the System package's currentTimeMillis() and nanoTime() methods to measure time.","items":[{"id":"2fa4fb4c-16f6-3696-5148-cd6e8ae83341","ancestors":[],"type":"function","description":"is a utility class that provides methods for printing time elapsed in milliseconds (ms), microseconds (us), and averaged us values. The class includes three methods: outTimeMs, outTimeUs, and outTimeUs(long startTime, String msg, int times). These methods take a start time and a message as inputs and print the time elapsed in the specified unit.","name":"TimeUtil","code":"public class TimeUtil {\n\tpublic static void outTimeMs(long startTime, String msg){\n\t\tlong ms = System.currentTimeMillis()-startTime;\n\t\tSystem.out.println(msg + \" \" + ms + \" ms\");\n\t\t\n\t}\n\tpublic static void outTimeUs(long startTime, String msg){\n\t\tlong us = (System.nanoTime()-startTime+500)/1000;\n\t\tSystem.out.println(msg + \" \" + us + \" us\");\n\t}\n\tpublic static void outTimeUs(long startTime, String msg, int times){\n\t\tlong ns_all = System.nanoTime()-startTime;\n\t\tdouble us_avg = (ns_all+500.0)/1000/times;\n\t\tSystem.out.println(\n\t\t\t\tString.format(\"%s avg of %d = %.2f us\", msg, times, us_avg));\n\t}\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":17,"docLength":null},{"id":"b5186c6b-fe01-6692-3c43-55ffff7b00f7","ancestors":["2fa4fb4c-16f6-3696-5148-cd6e8ae83341"],"type":"function","description":"takes a start time and message as input, calculates the time difference in milliseconds since the start time, and prints the result along with the message to the console.","params":[{"name":"startTime","type_name":"long","description":"time in milliseconds since the Java virtual machine (JVM) started executing the program.","complex_type":false},{"name":"msg","type_name":"String","description":"message to be printed along with the elapsed time in milliseconds.","complex_type":false}],"name":"outTimeMs","code":"public static void outTimeMs(long startTime, String msg){\n\t\tlong ms = System.currentTimeMillis()-startTime;\n\t\tSystem.out.println(msg + \" \" + ms + \" ms\");\n\t\t\n\t}","location":{"start":4,"insert":4,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":5,"docLength":null},{"id":"fd8b7b7d-4004-3587-3441-76dc92f61a75","ancestors":["2fa4fb4c-16f6-3696-5148-cd6e8ae83341"],"type":"function","description":"calculates and prints the time elapsed (in microseconds) since a specified start time, using the `System.nanoTime()` method to measure the time and the `1000` constant to convert nanoseconds to milliseconds.","params":[{"name":"startTime","type_name":"long","description":"time in milliseconds when the method was called, which is used to calculate the elapsed time in microseconds.","complex_type":false},{"name":"msg","type_name":"String","description":"message that is printed along with the elapsed time in milliseconds.","complex_type":false}],"name":"outTimeUs","code":"public static void outTimeUs(long startTime, String msg){\n\t\tlong us = (System.nanoTime()-startTime+500)/1000;\n\t\tSystem.out.println(msg + \" \" + us + \" us\");\n\t}","location":{"start":9,"insert":9,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":4,"docLength":null},{"id":"ebb85ec5-86b9-54ba-3845-d665be7ed1cf","ancestors":["2fa4fb4c-16f6-3696-5148-cd6e8ae83341"],"type":"function","description":"calculates and prints the average time taken by a given number of iterations of a specific operation, with nanosecond precision.","params":[{"name":"startTime","type_name":"long","description":"time at which the measurement of the average time taken to execute the given number of iterations should begin.","complex_type":false},{"name":"msg","type_name":"String","description":"message to be printed along with the average execution time calculation.","complex_type":false},{"name":"times","type_name":"int","description":"number of measurements to average when calculating the average time in microseconds.","complex_type":false}],"name":"outTimeUs","code":"public static void outTimeUs(long startTime, String msg, int times){\n\t\tlong ns_all = System.nanoTime()-startTime;\n\t\tdouble us_avg = (ns_all+500.0)/1000/times;\n\t\tSystem.out.println(\n\t\t\t\tString.format(\"%s avg of %d = %.2f us\", msg, times, us_avg));\n\t}","location":{"start":13,"insert":13,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":6,"docLength":null}]}}}