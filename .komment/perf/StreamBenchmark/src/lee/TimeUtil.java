{"name":"TimeUtil.java","path":"perf/StreamBenchmark/src/lee/TimeUtil.java","content":{"structured":{"description":"Three methods: outTimeMs, outTimeUs, and outTimeUs(long startTime, String msg, int times). The outTimeMs method prints a message and the difference between the current time in milliseconds and a specified starting time. The outTimeUs method calculates the average time difference between the current time in microseconds and a specified starting time for multiple calls, printing the result as an average value. Finally, the outTimeUs(long startTime, String msg, int times) method calculates and prints the average time difference in microseconds across multiple calls, including the total time spent and the number of calls made.","items":[{"id":"cd405ad4-63bf-02ac-474c-97ff8eeea4e6","ancestors":[],"type":"function","description":"is a utility class that provides three methods for printing the time elapsed in milliseconds (ms), microseconds (us), and average us based on nanoseconds (ns). The methods take a start time as input and print the time difference with respect to the current system time.","name":"TimeUtil","code":"public class TimeUtil {\n\tpublic static void outTimeMs(long startTime, String msg){\n\t\tlong ms = System.currentTimeMillis()-startTime;\n\t\tSystem.out.println(msg + \" \" + ms + \" ms\");\n\t\t\n\t}\n\tpublic static void outTimeUs(long startTime, String msg){\n\t\tlong us = (System.nanoTime()-startTime+500)/1000;\n\t\tSystem.out.println(msg + \" \" + us + \" us\");\n\t}\n\tpublic static void outTimeUs(long startTime, String msg, int times){\n\t\tlong ns_all = System.nanoTime()-startTime;\n\t\tdouble us_avg = (ns_all+500.0)/1000/times;\n\t\tSystem.out.println(\n\t\t\t\tString.format(\"%s avg of %d = %.2f us\", msg, times, us_avg));\n\t}\n}","location":{"start":3,"insert":3,"offset":" ","indent":0,"comment":null},"item_type":"class","length":17,"docLength":null},{"id":"c3c8a38d-f436-78a8-6445-378b412909df","ancestors":["cd405ad4-63bf-02ac-474c-97ff8eeea4e6"],"type":"function","description":"takes a start time and message as input, calculates the time difference in milliseconds since the start time, and prints the result to the console along with the message.","params":[{"name":"startTime","type_name":"long","description":"time at which the measurement of the elapsed time should begin, which is then used to calculate the elapsed time in milliseconds.","complex_type":false},{"name":"msg","type_name":"String","description":"message that will be printed along with the elapsed time in milliseconds.","complex_type":false}],"name":"outTimeMs","code":"public static void outTimeMs(long startTime, String msg){\n\t\tlong ms = System.currentTimeMillis()-startTime;\n\t\tSystem.out.println(msg + \" \" + ms + \" ms\");\n\t\t\n\t}","location":{"start":4,"insert":4,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":5,"docLength":null},{"id":"e81d30a6-ddce-ce9c-a64f-93c68dfec43c","ancestors":["cd405ad4-63bf-02ac-474c-97ff8eeea4e6"],"type":"function","description":"calculates and prints the time taken in microseconds (μs) for a given task, based on the difference between the current time and the start time, adjusted by 500 μs.","params":[{"name":"startTime","type_name":"long","description":"start time of the measurement in milliseconds, which is subtracted from the current system time to calculate the elapsed time in milliseconds.","complex_type":false},{"name":"msg","type_name":"String","description":"message to be printed along with the elapsed time in milliseconds.","complex_type":false}],"name":"outTimeUs","code":"public static void outTimeUs(long startTime, String msg){\n\t\tlong us = (System.nanoTime()-startTime+500)/1000;\n\t\tSystem.out.println(msg + \" \" + us + \" us\");\n\t}","location":{"start":9,"insert":9,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":4,"docLength":null},{"id":"6df93ebd-0c48-fcb3-be4e-45fbc35ffbae","ancestors":["cd405ad4-63bf-02ac-474c-97ff8eeea4e6"],"type":"function","description":"calculates and prints the average time taken for a given number of iterations, using nanosecond resolution to provide high accuracy.","params":[{"name":"startTime","type_name":"long","description":"time at which the measurement of execution time began.","complex_type":false},{"name":"msg","type_name":"String","description":"message to be printed along with the average execution time calculation.","complex_type":false},{"name":"times","type_name":"int","description":"number of measurements to average when calculating the average execution time for the given task.","complex_type":false}],"name":"outTimeUs","code":"public static void outTimeUs(long startTime, String msg, int times){\n\t\tlong ns_all = System.nanoTime()-startTime;\n\t\tdouble us_avg = (ns_all+500.0)/1000/times;\n\t\tSystem.out.println(\n\t\t\t\tString.format(\"%s avg of %d = %.2f us\", msg, times, us_avg));\n\t}","location":{"start":13,"insert":13,"offset":"\t","indent":1,"comment":null},"item_type":"method","length":6,"docLength":null}]}}}