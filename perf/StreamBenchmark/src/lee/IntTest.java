package lee;

import java.util.Arrays;
import java.util.Random;
/**
 * has a `main` method that calls the `doTest` method, which performs various tests
 * on an array of integers. The `doTest` method first calls the `warmUp` method, which
 * runs random integer operations on an array of size 100. Then, it loops through
 * multiple iterations of three different methods to compare the results: `minIntFor`,
 * `minIntStream`, and `minIntParallelStream`. Each of these methods performs a minimal
 * integer calculation on a given array length and compares the results.
 */
public class IntTest {

	/**
	 * executes a test for integers.
	 * 
	 * @param args 1 or more command line arguments passed to the program when it is
	 * launched, and are provided as an array to the `main()` method for processing.
	 * 
	 * 	- Length: The `args` array has 0 or more elements, as declared in the function signature.
	 * 	- Element types: Each element of `args` is a String object.
	 * 	- Optional arguments: There are no optional arguments provided in the example code.
	 */
	public static void main(String[] args) {
		new IntTest().doTest();
	}
	/**
	 * performs a series of tests on an array of integers, including measuring the time
	 * complexity of various methods for finding the minimum integer in the array using
	 * nanotime and TimeUtil classes.
	 */
	public void doTest(){
		warmUp();
		int[] lengths = {
				10000, 
				100000, 
				1000000, 
				10000000, 
				100000000, 
				1000000000
			};
		for(int length : lengths){
			System.out.println(String.format("---array length: %d---", length));
			int[] arr = new int[length];
			randomInt(arr);
			
			int times = 4;
			int min1 = 1;
			int min2 = 2;
			int min3 = 3;
			long startTime;
			
			startTime = System.nanoTime();
			for(int i=0; i<times; i++){
				min1 = minIntFor(arr);
			}
			TimeUtil.outTimeUs(startTime, "minIntFor time:", times);
			
			startTime = System.nanoTime();
			for(int i=0; i<times; i++){
				min2 = minIntStream(arr);
			}
			TimeUtil.outTimeUs(startTime, "minIntStream time:", times);
			
			startTime = System.nanoTime();
			for(int i=0; i<times; i++){
				min3 = minIntParallelStream(arr);
			}
			TimeUtil.outTimeUs(startTime, "minIntParallelStream time:", times);
			
			
			System.out.println(min1==min2 && min2==min3);
		}
	}
	/**
	 * performs random integer generation, min-int computations using various methods
	 * (for loop, Stream, and Parallel Stream), and iterates over 20000 times to prepare
	 * the system for future tasks.
	 */
	private void warmUp(){
		int[] arr = new int[100];
		randomInt(arr);
		for(int i=0; i<20000; i++){
//			minIntFor(arr);
			minIntStream(arr);
			minIntParallelStream(arr);
			
		}
	}
	/**
	 * takes an integer array as input and returns the smallest value present in the
	 * array. It does so by iterating through the elements of the array, comparing each
	 * one to the current minimum value, and updating the minimum value accordingly.
	 * 
	 * @param arr array whose minimum integer value is to be found.
	 * 
	 * 	- `arr` is an array of integers, with a length of `arr.length`.
	 * 	- Each element in the array can take on any integer value within the range of
	 * `-2^31` to `2^31-1`, inclusive of zero.
	 * 
	 * @returns the smallest integer value among the input array elements.
	 */
	private int minIntFor(int[] arr){
		int min = Integer.MAX_VALUE;
		for(int i=0; i<arr.length; i++){
			if(arr[i]<min)
				min = arr[i];
		}
		return min;
	}
	/**
	 * takes an integer array `arr` and returns the minimum value in the array as an int
	 * using the `Arrays.stream()` method to stream the elements of the array and the
	 * `min()` method to find the minimum value.
	 * 
	 * @param arr integer array to be processed by the `minIntStream()` method.
	 * 
	 * 	- `arr` is an array of integers.
	 * 	- It has at least one element.
	 * 	- The elements in the array are not null or empty.
	 * 
	 * @returns the minimum integer value in the input array.
	 */
	private int minIntStream(int[] arr){
		return Arrays.stream(arr).min().getAsInt();
	}
	/**
	 * takes an integer array and returns the minimum value in the array using a parallel
	 * stream.
	 * 
	 * @param arr 1D array of integers that is processed by the `minIntParallelStream()`
	 * method.
	 * 
	 * 	- `arr` is an array of integers with unspecified size and shape.
	 * 	- The elements in `arr` can take on any valid integer value.
	 * 	- `Arrays.stream(arr)` creates a parallel stream of integers from the elements
	 * of `arr`.
	 * 
	 * @returns the minimum integer value in the input array.
	 */
	private int minIntParallelStream(int[] arr){
		return Arrays.stream(arr).parallel().min().getAsInt();
	}
	/**
	 * generates a random integer array of specified length, using the `Random` class to
	 * generate unique integers.
	 * 
	 * @param arr array that will have its elements generated by the function, each element
	 * randomly selected from a range of integers using the `Random` class.
	 * 
	 * 	- `arr` is an instance of `int[]`. This means it is an array of integers that can
	 * store multiple values of type `int`.
	 * 	- The length of the array is determined by the value of its constructor.
	 * 	- Each element in the array is accessed through its index, which ranges from 0
	 * to the length of the array - 1.
	 */
	private void randomInt(int[] arr){
		Random r = new Random();
		for(int i=0; i<arr.length; i++){
			arr[i] = r.nextInt();
		}
	}
}
