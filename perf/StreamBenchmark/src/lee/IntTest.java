package lee;

import java.util.Arrays;
import java.util.Random;
/**
 * has a `main` method that calls the `doTest` method, which in turn calls the `warmUp`
 * method before looping through various lengths of integer arrays and comparing the
 * results of three different methods for finding the minimum value: `minIntFor`,
 * `minIntStream`, and `minIntParallelStream`. The `minIntFor` method compares the
 * minimum value found using each of these methods, and prints a message indicating
 * whether the values are equal or not.
 */
public class IntTest {

	/**
	 * runs the `IntTest` class's `doTest()` method, which performs some testing related
	 * to integers.
	 * 
	 * @param args 0 or more command-line arguments passed to the program when it is
	 * executed, and is used by the `main` method to perform various actions based on
	 * their presence or absence.
	 * 
	 * 	- Length: The length of the `args` array is 0.
	 * 	- Elements: The elements of the `args` array are of type `String`.
	 */
	public static void main(String[] args) {
		new IntTest().doTest();
	}
	/**
	 * performs several tests to compare the performance of different methods for finding
	 * the minimum integer in an array: `minIntFor`, `minIntStream`, and `minIntParallelStream`.
	 */
	public void doTest(){
		warmUp();
		int[] lengths = {
				10000, 
				100000, 
				1000000, 
				10000000, 
				100000000, 
				1000000000
			};
		for(int length : lengths){
			System.out.println(String.format("---array length: %d---", length));
			int[] arr = new int[length];
			randomInt(arr);
			
			int times = 4;
			int min1 = 1;
			int min2 = 2;
			int min3 = 3;
			long startTime;
			
			startTime = System.nanoTime();
			for(int i=0; i<times; i++){
				min1 = minIntFor(arr);
			}
			TimeUtil.outTimeUs(startTime, "minIntFor time:", times);
			
			startTime = System.nanoTime();
			for(int i=0; i<times; i++){
				min2 = minIntStream(arr);
			}
			TimeUtil.outTimeUs(startTime, "minIntStream time:", times);
			
			startTime = System.nanoTime();
			for(int i=0; i<times; i++){
				min3 = minIntParallelStream(arr);
			}
			TimeUtil.outTimeUs(startTime, "minIntParallelStream time:", times);
			
			
			System.out.println(min1==min2 && min2==min3);
		}
	}
	/**
	 * generates a random integer array, runs various methods on it, and repeats the
	 * process multiple times.
	 */
	private void warmUp(){
		int[] arr = new int[100];
		randomInt(arr);
		for(int i=0; i<20000; i++){
//			minIntFor(arr);
			minIntStream(arr);
			minIntParallelStream(arr);
			
		}
	}
	/**
	 * iterates through an array of integers, finds the smallest value among them, and
	 * returns it.
	 * 
	 * @param arr 1D array of integers that is being searched for the smallest value.
	 * 
	 * The `int[]` array `arr` represents a collection of integers that can range from
	 * negative infinity to positive infinity.
	 * The length of the array `arr` is determined by the value of its component `i`.
	 * 
	 * @returns the smallest integer value among the elements in the input array.
	 */
	private int minIntFor(int[] arr){
		int min = Integer.MAX_VALUE;
		for(int i=0; i<arr.length; i++){
			if(arr[i]<min)
				min = arr[i];
		}
		return min;
	}
	/**
	 * takes an integer array as input and returns the minimum value in the array using
	 * Java Stream API.
	 * 
	 * @param arr 1D array of integers that is to be processed by the `minIntStream()` method.
	 * 
	 * 	- `arr` is an int array with multiple values.
	 * 
	 * @returns the minimum integer value in the input array.
	 */
	private int minIntStream(int[] arr){
		return Arrays.stream(arr).min().getAsInt();
	}
	/**
	 * parallelly processes an integer array using the `Arrays.stream()` method and returns
	 * the minimum value in the array as an integer.
	 * 
	 * @param arr 1D array of integers that is being processed by the `minIntParallelStream()`
	 * method.
	 * 
	 * 	- It is an array of integers.
	 * 	- The array has several elements (the exact number may vary depending on the input).
	 * 	- Each element in the array is an integer value.
	 * 
	 * @returns the minimum value of the input array, calculated using the `min()` method
	 * and returning the result as an integer.
	 */
	private int minIntParallelStream(int[] arr){
		return Arrays.stream(arr).parallel().min().getAsInt();
	}
	/**
	 * generates a random integer array within a specified range by iterating through the
	 * array and assigning each index a randomly generated value using the `Random` class.
	 * 
	 * @param arr integer array whose elements are being randomly generated by the function.
	 * 
	 * 	- The function takes an integer array `arr` as input.
	 * 	- `arr` is an instance of the `int` class.
	 * 	- The length of `arr` can be determined using the `length` property.
	 */
	private void randomInt(int[] arr){
		Random r = new Random();
		for(int i=0; i<arr.length; i++){
			arr[i] = r.nextInt();
		}
	}
}
